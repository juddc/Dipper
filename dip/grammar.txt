IGNORE: "[ \t]";
NEWLINE: "\n|\r|\n\r|\r\n";
NAME: "[a-zA-Z_!$][a-zA-Z0-9_!$]*";
INTEGER: "0|[1-9][0-9]*[i]?";
FLOAT: "[1-9][0-9]*\.[0-9]+[f]?|[1-9][0-9]*f";
STRING: "\"[^\\\"\n]*\"";
BLOCK_START: "{";
BLOCK_END: "}";

program: (obj [NEWLINE]?)+;

obj: <import> | <from_import> | <module_const> | <func> | <struct> | <class>;

import: ["import"] import_name [NEWLINE];
from_import: ["from"] import_name ["import"] dotted_name [NEWLINE];

module_const: NAME "=" expr [NEWLINE];

struct: ["struct"] NAME [BLOCK_START] [NEWLINE] (field [NEWLINE])* [BLOCK_END];

import_name: ["."]* dotted_name;

func: ["fn"] NAME func_args (["->"] dotted_name)? block;

class: ["class"] NAME (":" NAME)? [BLOCK_START] [NEWLINE] (class_item [NEWLINE])* [BLOCK_END];

class_item: <field> | <func>;

field: typed_name_req (["="] const_value)? ([","] [NEWLINE]? arith_expr)?;

stmt: <print_stmt> | <call_stmt> | <return_stmt> | <break_stmt> | <continue_stmt> |
	<assign_stmt> | <inplace_stmt> | <del_stmt> | <yield_stmt> | <while_block> |
	<if_block> | <for_block> | <loop_block>;

while_block: ["while"] arith_expr block;
if_block: ["if"] arith_expr block elif_block* else_block?;
elif_block: [NEWLINE] ["elif"] arith_expr >block<;
else_block: [NEWLINE] ["else"] >block<;

return_stmt: ["return"] expr;
break_stmt: ["break"] INTEGER?;
continue_stmt: ["continue"] INTEGER?;

doc_stmt: ["|"] STRING [NEWLINE];
call_stmt: call;
assign_stmt: typed_name_opt "=" expr | dotted_name "=" expr;
inplace_stmt: NAME inplace_op expr;
print_stmt: ["print"] (expr ([","] expr)* ","?)?;
yield_stmt: ["yield"] expr;
del_stmt: ["del"] NAME;

block: <simple_block> | <complex_block>;
simple_block: [BLOCK_START] stmt? [BLOCK_END];
complex_block: [BLOCK_START] [NEWLINE] doc_stmt* (stmt [NEWLINE])* [BLOCK_END];

for_block: ["for"] NAME ["in"] expr block;
loop_block: ["loop"] block;

exprblock: simple_exprblock | complex_exprblock;
simple_exprblock: [BLOCK_START] expr [BLOCK_END];
complex_exprblock: [BLOCK_START] [NEWLINE] (stmt [NEWLINE])* (expr [NEWLINE]) [BLOCK_END];

expr: <arith_expr> | <simple_expr> | <if_expr> | <match_expr> | <range_expr>;

simple_expr: call | dotted_name;
if_expr: ["if"] arith_expr exprblock ([NEWLINE]? ["else"] exprblock)?;
match_expr: ["match"] atom [BLOCK_START] [NEWLINE] match_val* [BLOCK_END];
range_expr: atom [".."] atom;
arith_expr: atom (op atom)*;

match_query: expr | atom | "*";

match_val: simple_match_val | complex_match_val;
simple_match_val: match_query ["::"] expr [NEWLINE];
complex_match_val: match_query ["::"] [BLOCK_START] [NEWLINE] (stmt [NEWLINE])* expr [NEWLINE] [BLOCK_END] [NEWLINE];

atom: <INTEGER> | <FLOAT> | <STRING> | <call> | <dotted_name>;

const_value: <INTEGER> | <FLOAT> | <STRING>;

dotted_name: NAME (["."] NAME)*;

call: dotted_name call_args;

# type is optional
typed_name_opt: NAME ([":"] dotted_name)?;

# type is required
typed_name_req: NAME [":"] dotted_name;

call_args: ["(" ")"] | ["("] expr ([","] expr)* [")"];

func_args: ["(" ")"] | ["("] typed_name_opt ([","] typed_name_opt)* [")"];

inplace_op: <"+="> | <"-="> | <"*="> | <"/="> | <"%="> | <"&="> | <"|="> |
	<"^="> | <"<<="> | <">>="> | <"**="> | <"//=">;

op: <"+"> | <"-"> | <"*"> | <"/"> | <"//"> | <"**"> | <"<"> | <">"> |
	<"=="> | <">="> | <"<="> | <"!="> | <"in"> | <"is"> | <"and"> | <"or"> |
	<"!in"> | <"!is">;
